// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handleRegister(e) {
    e.preventDefault();
    console.log("=== REGISTRATION STARTED ===");

    const formData = new FormData(e.target);
    const fullName = formData.get('full_name');
    const email = formData.get('email');
    const password = formData.get('password');
    const confirmPassword = formData.get('confirm_password');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (password !== confirmPassword) {
        showMessage('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
        return;
    }

    if (password.length < 6) {
        showMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
        return;
    }

    console.log("Registration data:", { fullName, email, password });

    try {
        const response = await fetch(`${API_BASE}/api/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                full_name: fullName,
                email,
                password
            }),
        });

        console.log("Response status:", response.status);

        const responseText = await response.text();
        console.log("Raw response:", responseText);

        let responseData;
        try {
            responseData = JSON.parse(responseText);
        } catch (parseError) {
            console.error("JSON parse error:", parseError);
            showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞', 'error');
            return;
        }

        if (response.ok) {
            console.log("‚úÖ Registration successful:", responseData);
            showMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...', 'success');

            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            e.target.reset();

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await autoLoginAfterRegistration(email, password);

        } else {
            console.error("‚ùå Registration failed:", responseData);
            showMessage(responseData.detail || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'error');
        }
    } catch (error) {
        console.error('‚ùå Register connection error:', error);
        showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä.', 'error');
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function autoLoginAfterRegistration(email, password) {
    console.log("üîÑ Auto-login after registration...");

    try {
        const loginResponse = await fetch(`${API_BASE}/api/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, password }),
        });

        console.log("Auto-login response status:", loginResponse.status);

        if (loginResponse.ok) {
            const loginData = await loginResponse.json();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
            localStorage.setItem('token', loginData.access_token);
            console.log("‚úÖ Token saved to localStorage:", loginData.access_token);

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            token = loginData.access_token;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await loadCurrentUserAfterAuth();

            showMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...', 'success');

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–±–∏–Ω–µ—Ç
            setTimeout(() => {
                console.log("üéØ Redirecting to dashboard...");
                window.location.href = 'dashboard.html';
            }, 1000);

        } else {
            const errorData = await loginResponse.json();
            console.error("‚ùå Auto-login failed:", errorData);
            showMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è. –í–æ–π–¥–∏—Ç–µ manually.', 'error');

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            setTimeout(() => {
                window.location.href = 'login.html';
            }, 2000);
        }
    } catch (loginError) {
        console.error("‚ùå Auto-login error:", loginError);
        showMessage('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞. –í–æ–π–¥–∏—Ç–µ manually.', 'error');

        setTimeout(() => {
            window.location.href = 'login.html';
        }, 2000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function loadCurrentUserAfterAuth() {
    console.log("üîÑ Loading user after auth...");

    if (!token) {
        console.log("‚ùå No token for loading user");
        return null;
    }

    try {
        const response = await fetch(`${API_BASE}/api/me`, {
            headers: {
                'Authorization': `Bearer ${token}`,
            },
        });

        console.log("User load response status:", response.status);

        if (response.ok) {
            currentUser = await response.json();
            console.log("‚úÖ User loaded after auth:", currentUser);
            return currentUser;
        } else {
            console.log("‚ùå Failed to load user after auth");
            return null;
        }
    } catch (error) {
        console.error('‚ùå Load user after auth error:', error);
        return null;
    }
}