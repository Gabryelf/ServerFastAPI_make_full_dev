// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
let allUsers = [];
let allProducts = [];
let currentAction = null;
let currentItemId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
document.addEventListener('DOMContentLoaded', async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    await checkAdminAccess();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await loadAdminData();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
    setupSearch();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function checkAdminAccess() {
    await loadCurrentUser();

    if (!currentUser || currentUser.role !== 'admin') {
        alert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        window.location.href = 'index.html';
        return;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
async function loadAdminData() {
    try {
        await Promise.all([
            loadUsers(),
            loadAllProductsForAdmin(),
            updateStats()
        ]);
    } catch (error) {
        console.error('Error loading admin data:', error);
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
    try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã endpoint /api/admin/users
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ endpoints –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        const productsResponse = await fetch(`${API_BASE}/api/products/`);
        const allProducts = await productsResponse.json();

        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
        const usersMap = new Map();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞)
        usersMap.set(currentUser.id, {
            id: currentUser.id,
            email: currentUser.email,
            full_name: currentUser.full_name,
            role: currentUser.role,
            products_count: allProducts.filter(p => p.owner_id === currentUser.id).length
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
        allProducts.forEach(product => {
            if (!usersMap.has(product.owner_id)) {
                usersMap.set(product.owner_id, {
                    id: product.owner_id,
                    email: product.owner_email || 'unknown@example.com',
                    full_name: product.owner_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    role: 'user', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    products_count: allProducts.filter(p => p.owner_id === product.owner_id).length
                });
            }
        });

        allUsers = Array.from(usersMap.values());
        displayUsers(allUsers);

    } catch (error) {
        console.error('Error loading users:', error);
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function displayUsers(users) {
    const container = document.getElementById('users-list');

    if (users.length === 0) {
        container.innerHTML = '<div class="empty-state">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }

    container.innerHTML = users.map(user => `
        <div class="user-card admin-card">
            <div class="user-info">
                <div class="user-avatar">
                    ${user.full_name.charAt(0).toUpperCase()}
                </div>
                <div class="user-details">
                    <h4>${user.full_name}</h4>
                    <p class="user-email">${user.email}</p>
                    <div class="user-stats">
                        <span class="badge ${user.role === 'admin' ? 'badge-warning' : 'badge-info'}">
                            ${user.role === 'admin' ? 'üëë –ê–¥–º–∏–Ω' : 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                        </span>
                        <span class="badge badge-secondary">
                            üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${user.products_count || 0}
                        </span>
                    </div>
                </div>
            </div>
            <div class="user-actions">
                ${user.id !== currentUser.id ? `
                    ${user.role !== 'admin' ? `
                        <button onclick="promoteToAdmin(${user.id})"
                                class="btn btn-success btn-small">
                            –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º
                        </button>
                    ` : ''}
                    <button onclick="confirmDeleteUser(${user.id})"
                            class="btn btn-danger btn-small">
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                ` : `
                    <span class="current-user-badge">–≠—Ç–æ –≤—ã</span>
                `}
            </div>
        </div>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
async function loadAllProductsForAdmin() {
    try {
        const response = await fetch(`${API_BASE}/api/products/`);
        allProducts = await response.json();
        displayAllProducts(allProducts);
    } catch (error) {
        console.error('Error loading products for admin:', error);
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤', 'error');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ
function displayAllProducts(products) {
    const grid = document.getElementById('admin-products-grid');

    if (products.length === 0) {
        grid.innerHTML = '<div class="empty-state">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }

    grid.innerHTML = products.map(product => {
        const firstImage = product.image_paths && product.image_paths.length > 0
            ? product.image_paths[0]
            : '/static/uploads/default-product.jpg';

        return `
            <div class="product-card admin-product-card">
                <img src="${API_BASE}${firstImage}" alt="${product.name}" class="product-image"
                     onerror="this.src='${API_BASE}/static/uploads/default-product.jpg'">
                <div class="product-info">
                    <h3 class="product-name">${product.name}</h3>
                    <p class="product-description">${product.description}</p>
                    <div class="product-meta">
                        <span class="product-owner">–í–ª–∞–¥–µ–ª–µ—Ü: ${product.owner_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                        <span class="product-images-count">
                            üì∑ ${product.image_paths ? product.image_paths.length : 0} —Ñ–æ—Ç–æ
                            ${product.video_paths ? `üé• ${product.video_paths.length} –≤–∏–¥–µ–æ` : ''}
                        </span>
                    </div>
                    <div class="product-actions">
                        <button onclick="viewProductDetail(${product.id})"
                                class="btn btn-outline btn-small">
                            –ü—Ä–æ—Å–º–æ—Ç—Ä
                        </button>
                        <button onclick="confirmDeleteProduct(${product.id})"
                                class="btn btn-danger btn-small">
                            –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    document.getElementById('total-users').textContent = allUsers.length;
    document.getElementById('total-products').textContent = allProducts.length;
    document.getElementById('total-admins').textContent = allUsers.filter(u => u.role === 'admin').length;
}

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async function promoteToAdmin(userId) {
    if (!confirm(`–ù–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º?`)) return;

    try {
        const response = await fetch(`${API_BASE}/api/admin/users/${userId}/make-admin`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            showMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', 'success');
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await loadAdminData();
        } else {
            const error = await response.json();
            showMessage(error.detail || '–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
        }
    } catch (error) {
        console.error('Promote to admin error:', error);
        showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function confirmDeleteUser(userId) {
    const user = allUsers.find(u => u.id === userId);
    if (!user) return;

    currentAction = 'deleteUser';
    currentItemId = userId;

    document.getElementById('confirm-message').textContent =
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${user.full_name}" (${user.email})? –ë—É–¥—É—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –µ–≥–æ —Ç–æ–≤–∞—Ä—ã.`;

    showModal('confirm-modal');
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
function confirmDeleteProduct(productId) {
    const product = allProducts.find(p => p.id === productId);
    if (!product) return;

    currentAction = 'deleteProduct';
    currentItemId = productId;

    document.getElementById('confirm-message').textContent =
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${product.name}"?`;

    showModal('confirm-modal');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
document.getElementById('confirm-action').addEventListener('click', async () => {
    hideModal('confirm-modal');

    switch (currentAction) {
        case 'deleteUser':
            await deleteUser(currentItemId);
            break;
        case 'deleteProduct':
            await deleteProductAdmin(currentItemId);
            break;
    }

    currentAction = null;
    currentItemId = null;
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)
async function deleteUser(userId) {
    try {
        const response = await fetch(`${API_BASE}/api/admin/users/${userId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            showMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã', 'success');
            await loadAdminData();
        } else {
            const error = await response.json();
            showMessage(error.detail || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        }
    } catch (error) {
        console.error('Delete user error:', error);
        showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∞–¥–º–∏–Ω—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)
async function deleteProductAdmin(productId) {
    try {
        const response = await fetch(`${API_BASE}/api/products/${productId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            showMessage('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', 'success');
            await loadAdminData();
        } else {
            const error = await response.json();
            showMessage(error.detail || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
        }
    } catch (error) {
        console.error('Delete product error:', error);
        showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
    }
}

// –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫
function openTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });

    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById(tabName).classList.add('active');

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    event.currentTarget.classList.add('active');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
function setupSearch() {
    const userSearch = document.getElementById('user-search');
    const productSearch = document.getElementById('product-search');

    if (userSearch) {
        userSearch.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const filteredUsers = allUsers.filter(user =>
                user.full_name.toLowerCase().includes(searchTerm) ||
                user.email.toLowerCase().includes(searchTerm)
            );
            displayUsers(filteredUsers);
        });
    }

    if (productSearch) {
        productSearch.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const filteredProducts = allProducts.filter(product =>
                product.name.toLowerCase().includes(searchTerm) ||
                product.description.toLowerCase().includes(searchTerm)
            );
            displayAllProducts(filteredProducts);
        });
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞
function viewProductDetail(productId) {
    window.open(`product-detail.html?id=${productId}`, '_blank');
}
